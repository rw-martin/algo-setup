---
- hosts: localhost
  become: true
  vars:
    file_contents: "{{ lookup('file', '/dev/shm/tnames.txt') }}"  
    users: "{{ lookup('env', 'USERS') }}"
    info: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          38666166316366613632343762653634646234663066346664346136376162653466333862656565
          3736643463626631623964613864653565303332636230660a643338333662653139386563363666
          63663161366366313261653766373234306232636666626131393864643233353231656361363966
          3734303737613230360a393033366331623433363034376230656365366235346563353365623362
          33383264313532383066306437653135376337626533643462656333643564313736663862363462
          66653063636263626465643937313036376466636562323931643135616465303565383137663963
          37623865626531326635336332343237383632353962363035333732326661326261626337376236
          62666163313033323930

  tasks:
  
    - name: Download hostnames file
      shell: wget -O /dev/shm/tnames.txt https://raw.githubusercontent.com/rw-martin/algo-setup/main/tnames.txt
   
    - name: Set files up
      set_fact:
        files: "{{ users.split(',') }}"      

    - name: Grab random Transformers name from file
      set_fact:
        temphost: "{{ file_contents.split('\n') | random | lower }}"

    - name: Set hostname to selected Transformer name
      shell: /usr/bin/hostnamectl set-hostname {{ temphost }}
      
    - name: Modify local hosts file
      shell: echo "127.0.0.1 {{ temphost }}" >> /etc/hosts

    - name: "config apparmor to create log files - run {{ item }}"
      command: "{{ item }}"
      loop:
        - wget -O /etc/apparmor.d/usr.bin.dnscrypt-proxy https://raw.githubusercontent.com/rw-martin/algo-setup/main/usr.bin.dnscrypt-proxy
        - systemctl reload apparmor.service

    - name: get random number
      shell: shuf -i 58000-58900 -n 1
      register: portnumber

    - name: Wait for default WG install to complete    
      wait_for:
        path: /opt/algo/configs/localhost/wireguard/surface.conf
        timeout: 300
        state: present
        msg: "Default WG install failed to install"
    
    - name: Replace WG port
      replace:
        path: /opt/algo/configs/localhost/wireguard/{{ item }}.conf
        regexp: '51820'
        replace: '{{ portnumber.stdout }}'
      with_items: "{{ files }}"

    - name: Remove link to resolv.conf and update
      shell: rm /etc/resolv.conf && echo 'nameserver 127.0.2.1' > /etc/resolv.conf
      
    - name: Replace WG port in configuration file
      replace:
        path: /opt/algo/config.cfg
        regexp: 'wireguard_port: 51820'
        replace: 'wireguard_port: {{ portnumber.stdout }}'

    - name: Replace WG port in wg0 configuration file
      replace:
        path: /etc/wireguard/wg0.conf
        regexp: 'ListenPort = 51820'
        replace: 'ListenPort = {{ portnumber.stdout }}'

    - name: Allow wireguard traffic to any
      shell: ufw allow in on wg0 to any
      
    - name: Restart Wireguard
      shell: wg-quick down wg0 && wg-quick up wg0
    
    - name: chmod algo log file
      shell: chmod 400 /var/log/algo.log
      
    - name: Install fail2ban
      shell: apt-get install fail2ban -y
 
    - name: Download f2b local file
      shell: wget -O /etc/fail2ban/jail.local https://raw.githubusercontent.com/rw-martin/algo-setup/main/jail.local

    - name: Install vnstat
      shell: apt-get install vnstat -y

    - name: Install qrencode
      shell: apt-get install qrencode -y

    - name: Generate new QR codes
      shell: qrencode -o /opt/algo/configs/localhost/wireguard/{{ item }}.png < /opt/algo/configs/localhost/wireguard/{{ item }}.conf
      with_items: "{{ files }}"

    - name: Create softlink to WG configs
      shell: cd /root && ln -s /opt/algo/configs/localhost/wireguard wireguard
      
    - name: Create softlink to dnscrypt-proxy logs
      shell: cd /root && ln -s /var/log/dnscrypt-proxy dnscrypt-proxy
   
    - name: Update UFW 
      shell: ufw allow {{ portnumber.stdout }}
 
    - name: Config UFW to auto-start
      shell: wget -O /lib/systemd/system/ufw.service https://raw.githubusercontent.com/rw-martin/algo-setup/main/ufw.service
      
    - name: Allow SSH
      shell: ufw allow 22 && echo 'y' | ufw enable
       
    - name: Update hosts file
      replace:
        path: /etc/hosts
        regexp: 'vultr.guest'
        replace: '{{ temphost }}'
       
    - name: download dnscrypt config file
      command: "{{ item }}"
      loop:
        - wget -O /etc/dnscrypt-proxy/dnscrypt-proxy.toml https://raw.githubusercontent.com/rw-martin/algo-setup/main/dnscrypt-proxy.toml
        
    - name: download blacklist.txt file
      command: "{{ item }}"
      loop:
        - wget -O /etc/dnscrypt-proxy/blacklist.txt https://raw.githubusercontent.com/rw-martin/algo-setup/main/blacklist.txt
    
    - name: Modify toml file
      lineinfile:
        dest: /etc/dnscrypt-proxy/dnscrypt-proxy.toml
        line: '{{ item }}'
      with_items:
        - "[static.'NextDNS-b4ba6a']"
        - stamp = {{ info }}
      #no_log: true
      
    - name: Reload dnscrypt-proxy
      shell: service dnscrypt-proxy restart
      
    - name: Set timezone
      shell: timedatectl set-timezone Asia/Hong_Kong
    
    - name: Install DO agent
      shell: curl -sSL https://repos.insights.digitalocean.com/install.sh | sudo bash
     
    - name: Install collectd
      shell: apt-get install collectd -y
      
    - name: download collectd.conf file
      command: "{{ item }}"
      loop:
        - wget -O /etc/collectd/collectd.conf https://raw.githubusercontent.com/rw-martin/algo-setup/main/collectd.conf
   
    - name: Install ZSH
      shell: apt-get install zsh -y
      
    - name: Install ZSH
      shell: apt-get install autojump -y
    
    - name: Install ZSH
      shell: curl -L git.io/antigen > ~/antigen.zsh
    
    - name: Install NVM node
      shell: nvm install node
      
    - name: download zshrc file
      command: "{{ item }}"
      loop:
        - wget -O ~/.zshrc https://raw.githubusercontent.com/rw-martin/algo-setup/main/zshrc-new
   
    - name: Update environment
      shell: apt update
      register: output

    - set_fact:
        updates: "{{ output.stdout | regex_search('\\d+ packages' | string)  }}"

    - name: Apply available updates
      shell: export DEBIAN_FRONTEND=noninteractive && apt upgrade -y >> /dev/shm/ansible.log && reboot   
      register: upgraderesult
      when: updates != ""
